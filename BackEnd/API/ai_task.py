'''from openai import OpenAI
import os
import json
from datetime import date

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞
os.environ[
    'OPENAI_API_KEY'] = "API-TOKEN"
client = OpenAI()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ tasks.json ===
def save_tasks_to_json(tasks, path="../../FrontEnd/screens/tasks.json"):
    today_str = date.today().isoformat()

    default_structure = {
        today_str: [],
        "recurring_exclusions": {},
        "recurring_status": {}
    }

    if not os.path.exists(path) or os.stat(path).st_size == 0:
        data = default_structure
    else:
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            data = default_structure

    if today_str not in data:
        data[today_str] = []

    for task in tasks:
        task["done"] = False
        task["source"] = "ai"
        data[today_str].append(task)

    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def generate_personal_prompt(description: str, path="../../database/user_data.json"):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[
            {"role": "system", "content": """
–¢—ã ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä –ò–ò. –ü–æ–ª—É—á–∏–≤ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –û–í–ó –∏–ª–∏ —Ç—Ä–∞–≤–º–æ–π, —Å–æ–∑–¥–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

üîß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω:
- –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑, –≤–æ–∑—Ä–∞—Å—Ç, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.
- –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å, –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
- –ë—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∏–¥–µ system prompt.
- –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º

üìå –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON:
{
  "prompt": "..."
}
"""},
            {"role": "user", "content": description}
        ]
    )

    result_text = response.choices[0].message.content
    try:
        new_data = json.loads(result_text)
    except json.JSONDecodeError:
        new_data = {"prompt": result_text}

    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                existing_data = json.load(f)
        except json.JSONDecodeError:
            existing_data = {}
    else:
        existing_data = {}

    existing_data["prompt"] = new_data["prompt"]

    with open(path, "w", encoding="utf-8") as f:
        json.dump(existing_data, f, ensure_ascii=False, indent=2)

    return existing_data


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∑–∞–¥–∞—á ===
def ask_health_recommendations(description: str):
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",
        messages=[
            {
                "role": "system",
                "content": """
–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ª—É—á–∏–≤ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –û–í–ó, —Ç—ã:

1. –ö—Ä–∞—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É.
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

‚ö†Ô∏è –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ \"time\" –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"HH:MM\".
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
- –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏.
- –ü–æ–ª–µ \"done\" ‚Äî –≤—Å–µ–≥–¥–∞ false.
- –ü–æ–ª–µ \"recurring\" ‚Äî true –∏–ª–∏ false.
- –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ JSON!

üìå –ü—Ä–∏–º–µ—Ä:
{
  "text": "–ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
  "tasks": [
    {
      "title": "–î–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
      "time": "10:00",
      "done": false,
      "recurring": true
    }
  ]
}
"""
            },
            {"role": "user", "content": description}
        ]
    )

    response_text = completion.choices[0].message.content
    try:
        result = json.loads(response_text)
        tasks = result.get("tasks", [])
        save_tasks_to_json(tasks)

        return result
    except json.JSONDecodeError as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        print("–û—Ç–≤–µ—Ç:", response_text)
        return None
'''